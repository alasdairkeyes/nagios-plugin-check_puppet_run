#!/usr/bin/perl


## Use required modules
    use strict;
    use warnings;
    use YAML;
    use Nagios::Plugin qw(%ERRORS);
    use Getopt::Long;

    my $VERSION = 0.2;

## Defaults
    my $default_state_file          = '/var/lib/puppet/state/last_run_summary.yaml';
    my $default_run_timeout_minutes = 35;


    my $state_file                  = $default_state_file;
    my $run_timeout_minutes         = $default_run_timeout_minutes;


    my $help;

## Get command line switches
    GetOptions (
        "statefile=s"               => \$state_file,
        "runtimeout=i"              => \$run_timeout_minutes,

        "help"                      => \$help,
    );




## Show help?
    help()
        if ($help);




## File checks
    quit ("CRITICAL", "File $state_file doesn't exist")
        unless (-f $state_file);
    quit ("CRITICAL", "File $state_file can't be read")
        unless (-r $state_file);


## Load file
    open (my $fh, '<', $state_file)
        || quit ("CRITICAL", "Cannot read state file: $!");

    my $contents = join('',<$fh>);

## Puppet has no trailing newline on the file, which breaks YAML module, add it here
    $contents = $contents . "\n";
    my $yaml = eval {
        YAML::Load($contents);
    };
    quit ("CRITICAL", "Failed to read state file: $@")
        if ($@);


## Get process last run times
    my $run_timeout_seconds = $run_timeout_minutes * 60;
    my $last_run_epoch      = $yaml->{ time }{ last_run }
        || quit ("CRITICAL", "Failed to get last_run");
    my $last_run            = localtime($last_run_epoch);
    my $now                 = time;



## Produce info string
    my $info = join(' ',
        "Successes:$yaml->{ events }{ success }",
        "Failures:$yaml->{ events }{ failure }",
        "Last Run:$last_run",
        "Version:$yaml->{ version }{ puppet }",
        "Changes:$yaml->{ changes }{ total }",
        "Resources:$yaml->{ resources }{ total }",
    );



## Critical if any failures
    if ($yaml->{ events }{ failure }) {
        quit ("WARNING", $info);
    } else {

    ## Critical if last run was too long ago
        if (($now - $yaml->{ time }{ last_run }) > $run_timeout_seconds) {
            quit ("WARNING", $info)
        }
    }


## All OK
    quit ("OK", $info);



## Function to handle output
    sub quit {
        my $status = shift;
        my $message = join('',@_);
     ## Pipe in nagios seems to strip of stuff afterwards, remove it
        $message =~ s/\|//g;
        print $status . ": $message\n";
        exit $ERRORS{ $status };
    }


## Help message
    sub help {
        print "Version $VERSION\n";
        print "USAGE\n\n";
        print "   check_puppet_run [ --statefile=/path/to/puppet/statefile.yaml ] [ --runtimeout=X ]\n";
        print "OPTIONS\n";
        print "  --help                         This help message\n";
        print "  --statefile                    The path of the puppet statefile that gets updated after each run (Default: $default_state_file)\n";
        print "  --runtimeout                   The number of minutes since last run that an error should be reported (Default: $default_run_timeout_minutes)\n";
        print "\n";
        exit 0;
    }
